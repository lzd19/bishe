{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst defaultForm = {\n  id: '',\n  name: '',\n  formProps: '',\n  formOptions: '',\n  processDefinitionKey: '',\n  processDefinitionPath: '',\n  description: ''\n};\nexport default {\n  data() {\n    return {\n      stepIndex: 1,\n      form: {},\n      // processTypeList: [],\n      // processTemplate: defaultForm,\n      // uploadHeaders: {\n      //     'token': store.getters.token\n      // },\n      // fileList: []\n      rules: {\n        processTypeId: [{\n          required: true,\n          message: '请选择审批类型',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '请输入审批名称',\n          trigger: 'blur'\n        }]\n      },\n      processTypeList: []\n    };\n  },\n  created() {\n    this.loadProcessTypeList();\n  },\n  methods: {\n    loadProcessTypeList() {\n      this.$request.get('/oaProcessType/selectAll').then(res => {\n        if (res.code == '200') {\n          this.processTypeList = res.data;\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    // form,\n    // pre() {\n    //     this.stepIndex -= 1\n    // },\n    //\n    // next() {\n    //     if (this.stepIndex === 2) {\n    //         this.processTemplate.formProps = JSON.stringify(this.$refs.designer.getRule())\n    //         this.processTemplate.formOptions = JSON.stringify(this.$refs.designer.getOption())\n    //         console.log(JSON.stringify(this.processTemplate))\n    //     }\n    //     if (this.stepIndex === 3) {\n    //         this.saveOrUpdate()\n    //     }\n    //\n    //     this.stepIndex += 1\n    // },\n    //\n    // fetchProcessTypeData() {\n    //     processTypeApi.findAll().then(response => {\n    //         this.processTypeList = response.data\n    //     })\n    // },\n    // fetchDataById(id) {\n    //     api.getById(id).then(response => {\n    //         this.processTemplate = response.data\n    //         // 给表单设计器赋值\n    //         this.$refs.designer.setRule(JSON.parse(this.processTemplate.formProps))\n    //         this.$refs.designer.setOption(JSON.parse(this.processTemplate.formOptions))\n    //         this.fileList = [{\n    //             name: this.processTemplate.processDefinitionPath,\n    //             url: this.processTemplate.processDefinitionPath\n    //         }]\n    //     })\n    // },\n    //\n    // saveOrUpdate() {\n    //     this.saveBtnDisabled = true // 防止表单重复提交\n    //     if (!this.processTemplate.id) {\n    //         this.saveData()\n    //     } else {\n    //         this.updateData()\n    //     }\n    // },\n    //\n    // // 新增\n    // saveData() {\n    //     api.save(this.processTemplate).then(response => {\n    //         this.$router.push('/processSet/processTemplate')\n    //     })\n    // },\n    //\n    // // 根据id更新记录\n    // updateData() {\n    //     api.updateById(this.processTemplate).then(response => {\n    //         this.$router.push('/processSet/processTemplate')\n    //     })\n    // },\n    //\n    // // 文件上传限制条件\n    // beforeUpload(file) {\n    //     const isZip = file.type === 'application/x-zip-compressed'\n    //     const isLt2M = file.size / 1024 / 1024 < 2\n    //\n    //     if (!isZip) {\n    //         this.$message.error('文件格式不正确!')\n    //         return false\n    //     }\n    //     if (!isLt2M) {\n    //         this.$message.error('上传大小不能超过 2MB!')\n    //         return false\n    //     }\n    //     return true\n    // },\n    //\n    // // 上传成功的回调\n    // onUploadSuccess(res, file) {\n    //     // 填充上传文件列表\n    //     this.processTemplate.processDefinitionPath = res.data.processDefinitionPath\n    //     this.processTemplate.processDefinitionKey = res.data.processDefinitionKey\n    // },\n\n    back() {\n      this.$router.push('OaProcessTemplate');\n    }\n  }\n};","map":{"version":3,"names":["defaultForm","id","name","formProps","formOptions","processDefinitionKey","processDefinitionPath","description","data","stepIndex","form","rules","processTypeId","required","message","trigger","processTypeList","created","loadProcessTypeList","methods","$request","get","then","res","code","$message","error","msg","back","$router","push"],"sources":["src/views/manager/Template.vue"],"sourcesContent":["<template>\r\n    <div class=\"app-container\">\r\n        <el-steps :active=\"stepIndex\" finish-status=\"success\">\r\n            <el-step title=\"基本设置\"></el-step>\r\n            <el-step title=\"表单设置\"></el-step>\r\n            <el-step title=\"流程设置\"></el-step>\r\n        </el-steps>\r\n\r\n        <div class=\"tools-div\">\r\n            <el-button v-if=\"stepIndex > 1\" icon=\"el-icon-check\" type=\"primary\" size=\"small\" @click=\"pre()\" round>上一步\r\n            </el-button>\r\n            <el-button icon=\"el-icon-check\" type=\"primary\" size=\"small\" @click=\"next()\" round>{{\r\n                stepIndex == 3 ? '提交保存' : '下一步'\r\n                }}\r\n            </el-button>\r\n            <el-button type=\"primary\" size=\"small\" @click=\"back()\">返回</el-button>\r\n        </div>\r\n\r\n        <!-- 第一步 -->\r\n        <div v-show=\"stepIndex == 1\" style=\"margin-top: 20px;\">\r\n            <el-form ref=\"formRef\" label-width=\"150px\" size=\"small\" style=\"padding-right: 40px;\">\r\n                <el-form-item label=\"审批类型\" prop=\"processName\">\r\n                    <el-select v-model=\"form.processTypeId\" placeholder=\"审批类型\">\r\n                        <el-option v-for=\"item in processTypeList\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item label=\"审批名称\">\r\n                    <el-input v-model=\"form.name\" autocomplete=\"off\"/>\r\n                </el-form-item>\r\n                <el-form-item label=\"描述\">\r\n                    <el-input v-model=\"form.description\"/>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n\r\n<!--        &lt;!&ndash; 第二步 &ndash;&gt;-->\r\n<!--        <div v-show=\"stepIndex == 2\" style=\"margin-top: 20px;\">-->\r\n<!--            &lt;!&ndash;表单构建器&ndash;&gt;-->\r\n<!--            <fc-designer class=\"form-build\" ref=\"designer\"/>-->\r\n<!--        </div>-->\r\n\r\n<!--        &lt;!&ndash; 第三步 &ndash;&gt;-->\r\n<!--        <div v-show=\"stepIndex == 3\" style=\"margin-top: 20px;\">-->\r\n<!--            <el-upload-->\r\n<!--                    class=\"upload-demo\"-->\r\n<!--                    drag-->\r\n<!--                    action=\"/dev-api/admin/process/processTemplate/uploadProcessDefinition\"-->\r\n<!--                    :headers=\"uploadHeaders\"-->\r\n<!--                    multiple=\"false\"-->\r\n<!--                    :before-upload=\"beforeUpload\"-->\r\n<!--                    :on-success=\"onUploadSuccess\"-->\r\n<!--                    :file-list=\"fileList\"-->\r\n<!--            >-->\r\n<!--                <i class=\"el-icon-upload\"></i>-->\r\n<!--                <div class=\"el-upload__text\">将Activiti流程设计文件拖到此处，或<em>点击上传</em></div>-->\r\n<!--                <div class=\"el-upload__tip\" slot=\"tip\">只能上传zip压缩文件，且不超过2048kb</div>-->\r\n<!--            </el-upload>-->\r\n<!--        </div>-->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nconst defaultForm = {\r\n    id: '',\r\n    name: '',\r\n    formProps: '',\r\n    formOptions: '',\r\n    processDefinitionKey: '',\r\n    processDefinitionPath: '',\r\n    description: ''\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            stepIndex: 1,\r\n            form:{},\r\n            // processTypeList: [],\r\n            // processTemplate: defaultForm,\r\n            // uploadHeaders: {\r\n            //     'token': store.getters.token\r\n            // },\r\n            // fileList: []\r\n            rules:{\r\n                processTypeId:[\r\n                    {required:true, message:'请选择审批类型',trigger:'blur'},\r\n                ],\r\n                name:[\r\n                    {required:true, message:'请输入审批名称',trigger:'blur'},\r\n                ]\r\n            },\r\n            processTypeList:[],\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.loadProcessTypeList()\r\n    },\r\n\r\n    methods: {\r\n        loadProcessTypeList(){\r\n            this.$request.get('/oaProcessType/selectAll').then(res => {\r\n                if (res.code == '200') {\r\n                    this.processTypeList = res.data\r\n                } else {\r\n                    this.$message.error(res.msg)\r\n                }\r\n            })\r\n        },\r\n        // form,\r\n        // pre() {\r\n        //     this.stepIndex -= 1\r\n        // },\r\n        //\r\n        // next() {\r\n        //     if (this.stepIndex === 2) {\r\n        //         this.processTemplate.formProps = JSON.stringify(this.$refs.designer.getRule())\r\n        //         this.processTemplate.formOptions = JSON.stringify(this.$refs.designer.getOption())\r\n        //         console.log(JSON.stringify(this.processTemplate))\r\n        //     }\r\n        //     if (this.stepIndex === 3) {\r\n        //         this.saveOrUpdate()\r\n        //     }\r\n        //\r\n        //     this.stepIndex += 1\r\n        // },\r\n        //\r\n        // fetchProcessTypeData() {\r\n        //     processTypeApi.findAll().then(response => {\r\n        //         this.processTypeList = response.data\r\n        //     })\r\n        // },\r\n        // fetchDataById(id) {\r\n        //     api.getById(id).then(response => {\r\n        //         this.processTemplate = response.data\r\n        //         // 给表单设计器赋值\r\n        //         this.$refs.designer.setRule(JSON.parse(this.processTemplate.formProps))\r\n        //         this.$refs.designer.setOption(JSON.parse(this.processTemplate.formOptions))\r\n        //         this.fileList = [{\r\n        //             name: this.processTemplate.processDefinitionPath,\r\n        //             url: this.processTemplate.processDefinitionPath\r\n        //         }]\r\n        //     })\r\n        // },\r\n        //\r\n        // saveOrUpdate() {\r\n        //     this.saveBtnDisabled = true // 防止表单重复提交\r\n        //     if (!this.processTemplate.id) {\r\n        //         this.saveData()\r\n        //     } else {\r\n        //         this.updateData()\r\n        //     }\r\n        // },\r\n        //\r\n        // // 新增\r\n        // saveData() {\r\n        //     api.save(this.processTemplate).then(response => {\r\n        //         this.$router.push('/processSet/processTemplate')\r\n        //     })\r\n        // },\r\n        //\r\n        // // 根据id更新记录\r\n        // updateData() {\r\n        //     api.updateById(this.processTemplate).then(response => {\r\n        //         this.$router.push('/processSet/processTemplate')\r\n        //     })\r\n        // },\r\n        //\r\n        // // 文件上传限制条件\r\n        // beforeUpload(file) {\r\n        //     const isZip = file.type === 'application/x-zip-compressed'\r\n        //     const isLt2M = file.size / 1024 / 1024 < 2\r\n        //\r\n        //     if (!isZip) {\r\n        //         this.$message.error('文件格式不正确!')\r\n        //         return false\r\n        //     }\r\n        //     if (!isLt2M) {\r\n        //         this.$message.error('上传大小不能超过 2MB!')\r\n        //         return false\r\n        //     }\r\n        //     return true\r\n        // },\r\n        //\r\n        // // 上传成功的回调\r\n        // onUploadSuccess(res, file) {\r\n        //     // 填充上传文件列表\r\n        //     this.processTemplate.processDefinitionPath = res.data.processDefinitionPath\r\n        //     this.processTemplate.processDefinitionKey = res.data.processDefinitionKey\r\n        // },\r\n\r\n        back() {\r\n            this.$router.push('OaProcessTemplate')\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":";AA+DA,MAAAA,WAAA;EACAC,EAAA;EACAC,IAAA;EACAC,SAAA;EACAC,WAAA;EACAC,oBAAA;EACAC,qBAAA;EACAC,WAAA;AACA;AACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,IAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,KAAA;QACAC,aAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAb,IAAA,GACA;UAAAW,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAC,eAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,mBAAA;EACA;EAEAC,OAAA;IACAD,oBAAA;MACA,KAAAE,QAAA,CAAAC,GAAA,6BAAAC,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAR,eAAA,GAAAO,GAAA,CAAAf,IAAA;QACA;UACA,KAAAiB,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;QACA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAC,KAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}