{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport store from \"core-js/internals/shared-store\";\nconst defaultForm = {\n  id: '',\n  name: '',\n  formProps: '',\n  formOptions: '',\n  processDefinitionKey: '',\n  processDefinitionPath: '',\n  description: ''\n};\nexport default {\n  data() {\n    return {\n      stepIndex: 1,\n      processTypeList: [],\n      processTemplate: defaultForm,\n      uploadHeaders: {\n        'token': store.getters.token\n      },\n      fileList: []\n    };\n  },\n  created() {\n    let id = this.$route.query.id;\n    console.log(id);\n    if (id > 0) {\n      this.fetchDataById(id);\n    }\n    this.fetchProcessTypeData();\n  },\n  methods: {\n    pre() {\n      this.stepIndex -= 1;\n    },\n    next() {\n      if (this.stepIndex === 2) {\n        this.processTemplate.formProps = JSON.stringify(this.$refs.designer.getRule());\n        this.processTemplate.formOptions = JSON.stringify(this.$refs.designer.getOption());\n        console.log(JSON.stringify(this.processTemplate));\n      }\n      if (this.stepIndex === 3) {\n        this.saveOrUpdate();\n      }\n      this.stepIndex += 1;\n    },\n    fetchProcessTypeData() {\n      processTypeApi.findAll().then(response => {\n        this.processTypeList = response.data;\n      });\n    },\n    fetchDataById(id) {\n      api.getById(id).then(response => {\n        this.processTemplate = response.data;\n        // 给表单设计器赋值\n        this.$refs.designer.setRule(JSON.parse(this.processTemplate.formProps));\n        this.$refs.designer.setOption(JSON.parse(this.processTemplate.formOptions));\n        this.fileList = [{\n          name: this.processTemplate.processDefinitionPath,\n          url: this.processTemplate.processDefinitionPath\n        }];\n      });\n    },\n    saveOrUpdate() {\n      this.saveBtnDisabled = true; // 防止表单重复提交\n      if (!this.processTemplate.id) {\n        this.saveData();\n      } else {\n        this.updateData();\n      }\n    },\n    // 新增\n    saveData() {\n      api.save(this.processTemplate).then(response => {\n        this.$router.push('/processSet/processTemplate');\n      });\n    },\n    // 根据id更新记录\n    updateData() {\n      api.updateById(this.processTemplate).then(response => {\n        this.$router.push('/processSet/processTemplate');\n      });\n    },\n    // 文件上传限制条件\n    beforeUpload(file) {\n      const isZip = file.type === 'application/x-zip-compressed';\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isZip) {\n        this.$message.error('文件格式不正确!');\n        return false;\n      }\n      if (!isLt2M) {\n        this.$message.error('上传大小不能超过 2MB!');\n        return false;\n      }\n      return true;\n    },\n    // 上传成功的回调\n    onUploadSuccess(res, file) {\n      // 填充上传文件列表\n      this.processTemplate.processDefinitionPath = res.data.processDefinitionPath;\n      this.processTemplate.processDefinitionKey = res.data.processDefinitionKey;\n    },\n    back() {\n      this.$router.push('/processSet/processTemplate');\n    }\n  }\n};","map":{"version":3,"names":["store","defaultForm","id","name","formProps","formOptions","processDefinitionKey","processDefinitionPath","description","data","stepIndex","processTypeList","processTemplate","uploadHeaders","getters","token","fileList","created","$route","query","console","log","fetchDataById","fetchProcessTypeData","methods","pre","next","JSON","stringify","$refs","designer","getRule","getOption","saveOrUpdate","processTypeApi","findAll","then","response","api","getById","setRule","parse","setOption","url","saveBtnDisabled","saveData","updateData","save","$router","push","updateById","beforeUpload","file","isZip","type","isLt2M","size","$message","error","onUploadSuccess","res","back"],"sources":["src/views/manager/Template.vue"],"sourcesContent":["<template>\r\n    <div class=\"app-container\">\r\n        <el-steps :active=\"stepIndex\" finish-status=\"success\">\r\n            <el-step title=\"基本设置\"></el-step>\r\n            <el-step title=\"表单设置\"></el-step>\r\n            <el-step title=\"流程设置\"></el-step>\r\n        </el-steps>\r\n\r\n        <div class=\"tools-div\">\r\n            <el-button v-if=\"stepIndex > 1\" icon=\"el-icon-check\" type=\"primary\" size=\"small\" @click=\"pre()\" round>上一步\r\n            </el-button>\r\n            <el-button icon=\"el-icon-check\" type=\"primary\" size=\"small\" @click=\"next()\" round>{{\r\n                stepIndex == 3 ? '提交保存' : '下一步'\r\n                }}\r\n            </el-button>\r\n            <el-button type=\"primary\" size=\"small\" @click=\"back()\">返回</el-button>\r\n        </div>\r\n\r\n        <!-- 第一步 -->\r\n        <div v-show=\"stepIndex == 1\" style=\"margin-top: 20px;\">\r\n            <el-form ref=\"flashPromotionForm\" label-width=\"150px\" size=\"small\" style=\"padding-right: 40px;\">\r\n                <el-form-item label=\"审批类型\">\r\n                    <el-select v-model=\"processTemplate.processTypeId\" placeholder=\"请选择审批类型\">\r\n                        <el-option v-for=\"item in processTypeList\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item label=\"审批名称\">\r\n                    <el-input v-model=\"processTemplate.name\"/>\r\n                </el-form-item>\r\n                <el-form-item label=\"描述\">\r\n                    <el-input v-model=\"processTemplate.description\"/>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n\r\n        <!-- 第二步 -->\r\n        <div v-show=\"stepIndex == 2\" style=\"margin-top: 20px;\">\r\n            <!--表单构建器-->\r\n            <fc-designer class=\"form-build\" ref=\"designer\"/>\r\n        </div>\r\n\r\n        <!-- 第三步 -->\r\n        <div v-show=\"stepIndex == 3\" style=\"margin-top: 20px;\">\r\n            <el-upload\r\n                    class=\"upload-demo\"\r\n                    drag\r\n                    action=\"/dev-api/admin/process/processTemplate/uploadProcessDefinition\"\r\n                    :headers=\"uploadHeaders\"\r\n                    multiple=\"false\"\r\n                    :before-upload=\"beforeUpload\"\r\n                    :on-success=\"onUploadSuccess\"\r\n                    :file-list=\"fileList\"\r\n            >\r\n                <i class=\"el-icon-upload\"></i>\r\n                <div class=\"el-upload__text\">将Activiti流程设计文件拖到此处，或<em>点击上传</em></div>\r\n                <div class=\"el-upload__tip\" slot=\"tip\">只能上传zip压缩文件，且不超过2048kb</div>\r\n            </el-upload>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport store from \"core-js/internals/shared-store\";\r\n\r\nconst defaultForm = {\r\n    id: '',\r\n    name: '',\r\n    formProps: '',\r\n    formOptions: '',\r\n    processDefinitionKey: '',\r\n    processDefinitionPath: '',\r\n    description: ''\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            stepIndex: 1,\r\n            processTypeList: [],\r\n            processTemplate: defaultForm,\r\n            uploadHeaders: {\r\n                'token': store.getters.token\r\n            },\r\n            fileList: []\r\n        }\r\n    },\r\n\r\n    created() {\r\n        let id = this.$route.query.id\r\n        console.log(id)\r\n        if (id > 0) {\r\n            this.fetchDataById(id)\r\n        }\r\n        this.fetchProcessTypeData()\r\n    },\r\n\r\n    methods: {\r\n        pre() {\r\n            this.stepIndex -= 1\r\n        },\r\n\r\n        next() {\r\n            if (this.stepIndex === 2) {\r\n                this.processTemplate.formProps = JSON.stringify(this.$refs.designer.getRule())\r\n                this.processTemplate.formOptions = JSON.stringify(this.$refs.designer.getOption())\r\n                console.log(JSON.stringify(this.processTemplate))\r\n            }\r\n            if (this.stepIndex === 3) {\r\n                this.saveOrUpdate()\r\n            }\r\n\r\n            this.stepIndex += 1\r\n        },\r\n\r\n        fetchProcessTypeData() {\r\n            processTypeApi.findAll().then(response => {\r\n                this.processTypeList = response.data\r\n            })\r\n        },\r\n        fetchDataById(id) {\r\n            api.getById(id).then(response => {\r\n                this.processTemplate = response.data\r\n                // 给表单设计器赋值\r\n                this.$refs.designer.setRule(JSON.parse(this.processTemplate.formProps))\r\n                this.$refs.designer.setOption(JSON.parse(this.processTemplate.formOptions))\r\n                this.fileList = [{\r\n                    name: this.processTemplate.processDefinitionPath,\r\n                    url: this.processTemplate.processDefinitionPath\r\n                }]\r\n            })\r\n        },\r\n\r\n        saveOrUpdate() {\r\n            this.saveBtnDisabled = true // 防止表单重复提交\r\n            if (!this.processTemplate.id) {\r\n                this.saveData()\r\n            } else {\r\n                this.updateData()\r\n            }\r\n        },\r\n\r\n        // 新增\r\n        saveData() {\r\n            api.save(this.processTemplate).then(response => {\r\n                this.$router.push('/processSet/processTemplate')\r\n            })\r\n        },\r\n\r\n        // 根据id更新记录\r\n        updateData() {\r\n            api.updateById(this.processTemplate).then(response => {\r\n                this.$router.push('/processSet/processTemplate')\r\n            })\r\n        },\r\n\r\n        // 文件上传限制条件\r\n        beforeUpload(file) {\r\n            const isZip = file.type === 'application/x-zip-compressed'\r\n            const isLt2M = file.size / 1024 / 1024 < 2\r\n\r\n            if (!isZip) {\r\n                this.$message.error('文件格式不正确!')\r\n                return false\r\n            }\r\n            if (!isLt2M) {\r\n                this.$message.error('上传大小不能超过 2MB!')\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n\r\n        // 上传成功的回调\r\n        onUploadSuccess(res, file) {\r\n            // 填充上传文件列表\r\n            this.processTemplate.processDefinitionPath = res.data.processDefinitionPath\r\n            this.processTemplate.processDefinitionKey = res.data.processDefinitionKey\r\n        },\r\n\r\n        back() {\r\n            this.$router.push('/processSet/processTemplate')\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}